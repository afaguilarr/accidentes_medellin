pkg_test_and_load <- function(pkg)
{
if(pkg %in% rownames(installed.packages()))
{
library(pkg, character.only = TRUE)
}
else
{
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE)
}
}
init_pkgs <- function()
{
pkgs <- c("mvtnorm", "ggplot2", "MBESS", "Matrix", "ks",
"caret", "rgdal", "leaflet", "knitr","rmarkdown",
"PKI", "packrat", "ggmap")
lapply(pkgs, pkg_test_and_load)
}
init_pkgs()
pkgs <- c("mvtnorm", "ggplot2", "MBESS", "Matrix", "ks",
"caret", "rgdal", "leaflet", "knitr","rmarkdown",
"PKI", "packrat", "ggmap", "raster")
init_pkgs <- function()
{
pkgs <- c("mvtnorm", "ggplot2", "MBESS", "Matrix", "ks",
"caret", "rgdal", "leaflet", "knitr","rmarkdown",
"PKI", "packrat", "ggmap", "raster")
lapply(pkgs, pkg_test_and_load)
}
init_pkgs()
barrios_med <- shapefile("./Datasets/Barrio_Vereda/Barrio_Vereda.shp",
encoding="UTF-8",use_iconv=TRUE)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
barrios_med <- shapefile("./Datasets/Barrio_Vereda/Barrio_Vereda.shp",
encoding="UTF-8",use_iconv=TRUE)
nombres_barrios=iconv(accidentes_en_med$BARRIO,"UTF-8","ISO_8859-1")
nombres_barrios=iconv(barrios_med$NOMBRE,"UTF-8","ISO_8859-1")
barrios_med %>% leaflet() %>% addTiles() %>% addPolygons(map, popup = nombres_barrios, weight = 1)
nombres_barrios=iconv(barrios_med@data$NOMBRE,"UTF-8","ISO_8859-1")
barrios_med %>% leaflet() %>% addTiles() %>% addPolygons(map, popup = nombres_barrios, weight = 1)
m<-leaflet(barrios_med)
m<-addProviderTiles(m,provider="OpenStreetMap.Mapnik")
m
m %>% addTiles()
m %>% addTiles() %>% addPolygons(m, popup = barrios_med@data$NOMBRE, weight = 1)
m<-addPolygons(m,popup=barrios_med@data$NOMBRE,weight = 1)
m
knitr::opts_chunk$set(echo = TRUE)
init_pkgs <- function()
{
pkgs <- c("mvtnorm", "ggplot2", "MBESS", "Matrix", "ks",
"caret", "rgdal", "leaflet", "knitr","rmarkdown",
"PKI", "packrat", "ggmap", "raster", "tidyverse")
lapply(pkgs, pkg_test_and_load)
}
init_pkgs()
print(m)
install.packages("factoextra")
medellin_map_location <- "./Datasets/Barrio_Vereda/Barrio_Vereda.shp"
init_map(medellin_map_location)
init_map <- function(data)
{
barrios_med <- shapefile(data, encoding="UTF-8",use_iconv=TRUE)
nombres_barrios=iconv(barrios_med@data$NOMBRE,"UTF-8","ISO_8859-1")
m<-leaflet(barrios_med)
m<-addProviderTiles(m,provider="OpenStreetMap.Mapnik")
m<-addPolygons(m,popup=barrios_med@data$NOMBRE,weight = 1)
m %>% addTiles() %>% addPolygons(m, popup = barrios_med@data$NOMBRE, weight = 1)
print(m)
}
init_map(medellin_map_location)
init_map <- function(data)
{
barrios_med <- shapefile(data, encoding="UTF-8",use_iconv=TRUE)
nombres_barrios=iconv(barrios_med@data$NOMBRE,"UTF-8","ISO_8859-1")
m<-leaflet(barrios_med)
m<-addProviderTiles(m,provider="OpenStreetMap.Mapnik")
m<-addPolygons(m,popup=barrios_med@data$NOMBRE,weight = 1)
print(m)
}
medellin_map_location <- "./Datasets/Barrio_Vereda/Barrio_Vereda.shp"
init_map(medellin_map_location)
View(barrios_med)
head(barrios_med@data, 20)
init_map <- function(data)
{
barrios_med <- shapefile(data, encoding="UTF-8",use_iconv=TRUE)
nombres_barrios=iconv(barrios_med@data$NOMBRE,"UTF-8","ISO_8859-1")
m<-leaflet(barrios_med)
m<-addProviderTiles(m,provider="OpenStreetMap.Mapnik")
m<-addPolygons(m,popup=barrios_med@data$NOMBRE,weight = 1)
colores<-sample(x=c("orange","green","yellow"),
size=length(barrios_med@data$NOMBRE),replace=TRUE)
m<-addPolygons(m,popup=barrios_med@data$NOMBRE,color=colores,weight = 1)
print(m)
}
medellin_map_location <- "./Datasets/Barrio_Vereda/Barrio_Vereda.shp"
init_map(medellin_map_location)
is.na(colors)
colors<-NA
is.na(colors)
init_map <- function(data, colors=NA)
{
barrios_med <- shapefile(data, encoding="UTF-8",use_iconv=TRUE)
nombres_barrios=iconv(barrios_med@data$NOMBRE,"UTF-8","ISO_8859-1")
m<-leaflet(barrios_med)
m<-addProviderTiles(m,provider="OpenStreetMap.Mapnik")
m<-addPolygons(m,popup=barrios_med@data$NOMBRE,weight = 1)
if(is.na(colors))
{
colores<-sample(x=c("orange","green","yellow"),
size=length(barrios_med@data$NOMBRE),replace=TRUE)
m<-addPolygons(m,popup=barrios_med@data$NOMBRE,color=colores,weight = 1)
print(m)
}
}
medellin_map_location <- "./Datasets/Barrio_Vereda/Barrio_Vereda.shp"
init_map(medellin_map_location)
init_map <- function(data, colors=NA)
{
barrios_med <- shapefile(data, encoding="UTF-8",use_iconv=TRUE)
nombres_barrios=iconv(barrios_med@data$NOMBRE,"UTF-8","ISO_8859-1")
m<-leaflet(barrios_med)
m<-addProviderTiles(m,provider="OpenStreetMap.Mapnik")
m<-addPolygons(m,popup=barrios_med@data$NOMBRE,weight = 1)
if(is.na(colors))
{
#colores<-sample(x=c("orange","green","yellow"),
#                size=length(barrios_med@data$NOMBRE),replace=TRUE)
m<-addPolygons(m,popup=barrios_med@data$NOMBRE,color=colores,weight = 1)
print(m)
}
}
source("./maps_scripts")
source("maps_scripts.R")
source("maps_scripts.R")
knitr::opts_chunk$set(echo = TRUE)
##Carga de paquetes previos
library(dplyr)
library(ggplot2)
library(tidyverse)
##Lectura de las 5 bases de datos desde el drectorio
getwd() #CHECKEAR QUE EL DIRECTORIO SEA: "/accidentes_medellin/Descriptiva y depuracion"
files_names= list.files(pattern="*.csv", path =  paste(getwd(),"/Datasets",sep=""))
path <- paste(getwd(),"/Datasets/",files_names,sep="")
df <- do.call(rbind, lapply(path, function(x) read.csv(x, stringsAsFactors = FALSE,encoding = 'UTF-8', ) )) ##se leen y se juntas las 6 bases de datos usando los nombres de los archivos.
a <- 2
#df$RADICADO <- as.character(df$RADICADO)
#Se cambia el nombre de la primera columna
df<- df %>% rename(OBJECTID = X.U.FEFF.OBJECTID)
#Cambios de tpo de datos en la base
df<- df %>%
mutate_at(vars(starts_with("RADIC")),funs(as.character)) %>%
mutate_at(vars(starts_with("OBJECT")),funs(as.character))
#df$RADICADO <- as.character(df$RADICADO)
#Se cambia el nombre de la primera columna
df<- df %>% rename(OBJECTID = X.U.FEFF.OBJECTID)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
##Carga de paquetes previos
library(dplyr)
library(ggplot2)
library(tidyverse)
##Lectura de las 5 bases de datos desde el drectorio
getwd() #CHECKEAR QUE EL DIRECTORIO SEA: "/accidentes_medellin/Descriptiva y depuracion"
files_names= list.files(pattern="*.csv", path =  paste(getwd(),"/Datasets",sep=""))
path <- paste(getwd(),"/Datasets/",files_names,sep="")
df <- do.call(rbind, lapply(path, function(x) read.csv(x, stringsAsFactors = FALSE,encoding = 'UTF-8', ) )) ##se leen y se juntas las 6 bases de datos usando los nombres de los archivos.
#df$RADICADO <- as.character(df$RADICADO)
#Se cambia el nombre de la primera columna
df<- df %>% rename(OBJECTID = X.U.FEFF.OBJECTID)
#Cambios de tpo de datos en la base
df<- df %>%
mutate_at(vars(starts_with("RADIC")),funs(as.character)) %>%
mutate_at(vars(starts_with("OBJECT")),funs(as.character))
#df$RADICADO <- as.character(df$RADICADO)
#Se cambia el nombre de la primera columna
df<- df %>% rename(OBJECTID = X.U.FEFF.OBJECTID)
View(df)
View(df)
#df$RADICADO <- as.character(df$RADICADO)
#Se cambia el nombre de la primera columna
df<- df %>% rename(OBJECTID = X.U.FEFF.OBJECTID)
knitr::opts_chunk$set(echo = TRUE)
df2 <- df[df$TIPO_GEOCOD!="ZONA RURAL",]
##Se crea df2, nueva base de datos con las depuraciones respectivas.
df2[df2$GRAVEDAD == "CON MUERTO" ,]$GRAVEDAD <- "MUERTO"
df2[df2$CLASE == "Caida Ocupante" | df2$CLASE == "Caída de Ocupante" ,]$CLASE <- "Caída Ocupante"
df2[df2$CLASE == "Choque y Atropello" | df2$CLASE ==  "Choque ",]$CLASE = "Choque"
barrios <-c("Aures No. 2","Barrio de Jesús","Berlin","Bomboná No. 1","Campo Valdés No.2","Manrique Central No.1","Manrique Central No.2","Moscú No.1","Moscú No.2",
"Nueva Villa de La Iguaná","Santa María de Los Ángeles","Santo Domingo Savio No.1","Versalles No.1","Versalles No.2","Villa Liliam")
reemplazo <- c("Aures No.2","Barrios de Jesús","Berlín","Bomboná No.1","Campo Valdés No. 2","Manrique Central No. 1","Manrique Central No. 2","Moscú No. 1","Moscú No. 2",
"Nueva Villa de la Iguaná","Santa María de los Ángeles","Santo Domingo Savio No. 1","Versalles No. 1","Versalles No. 2","Villa Lilliam")
for(i in (1:length(barrios))){
df2[!is.na(df2$BARRIO) & df2$BARRIO == barrios[i],]$BARRIO = reemplazo[i]
}
clase_c<-count(df2, CLASE)
clase_c[order(-clase_c$n),]
count(df2, GRAVEDAD)
##Los datos relevantes que se excluyen corresponden a los 5 corregimientos, que definen la zona rural de medellín
comunas <- count(df2, COMUNA)
#head(comunas[order(-comunas$n),],25) #Numero de accidentes por comuna/corregimiento
comunas_relevantes <- head(comunas[order(-comunas$n),][1], 16)
df3 <- df2 #saving df2
df2 <- df2[df2$COMUNA %in% as.vector(unlist(comunas_relevantes)),]
n_occur <- data.frame(table(df2$RADICADO))
a<-df2[df3$RADICADO %in% n_occur$Var1[n_occur$Freq > 1],] ## Algunas 5 o 6 tienen los mismos datos. Pero la gran mayoria varian en varias columnas
a[order(a$RADICADO),]
##ESta es la lista de los NA y los barrios con NA's o espacios vacios, si desea eliminarlos o hacerles imputación más adelante
df2[df2 == ""] <- NA
na_DF <- df2[rowSums(is.na(df2)) > 0,]# Las columnas con NA son diseño (gran mayoria) y clase
final.df<- na.omit(df2) #DF sin NAs
print(paste("El numero de datos con NA es:" , as.character(dim(na_DF)[1])))
write.csv(final.df, "df_depurada_1.csv", row.names=F)
library(cluster)    # clustering algorithms
library(factoextra)
library(tidyr)
cluster_df <- final.df[ ,c(4,8,9,14,15)]
cluster_df <-  cluster_df%>%
group_by(BARRIO,CLASE)%>%
summarise(
total = n()
)
cluster_df <- spread(data = cluster_df, key = CLASE, total)
cluster_df <- cluster_df%>%
mutate_all(~replace(., is.na(.), 0))
rownames(cluster_df) <- unlist(cluster_df[,1])
cluster_df[,1] <- NULL
#Elimino
#Elimino
fviz_nbclust(cluster_df, kmeans, method = "wss")
fviz_nbclust(cluster_df, kmeans, method = "silhouette")
gap_stat <- clusGap(cluster_df, FUN = kmeans, nstart = 50,
K.max = 10, B =269 )
fviz_gap_stat(gap_stat)
cluster2 <- kmeans(cluster_df, centers = 2, iter.max=1000, nstart=100)
cluster3 <- kmeans(cluster_df, centers = 3, iter.max=1000, nstart=100)
cluster4 <- kmeans(cluster_df, centers = 4, iter.max=1000, nstart=100)
cluster5 <- kmeans(cluster_df, centers = 5, iter.max=1000, nstart=100)
cluster6 <- kmeans(cluster_df, centers = 6, iter.max=1000, nstart=100)
cluster10 <- kmeans(cluster_df, centers = 10, iter.max=1000, nstart=100)
clust.mat <- matrix(c(cluster2$cluster), ncol=1)
rownames(clust.mat) <- names(cluster2$cluster)
clust.mat <- cbind(clust.mat, cluster3$cluster, cluster4$cluster,cluster5$cluster,cluster6$cluster, cluster10$cluster)
colnames(clust.mat) <- lapply(c("C2","C3","C4","C5","C6","C10"),paste,"G", sep="")
clust.mat <- as.data.frame(clust.mat)
grouped_df <- merge(cluster_df, clust.mat,by=0,all = T)
grouped_df%>%
group_by(C6G)%>%
summarise(
Atropellos = mean(Atropello),
Caidas = mean(`Caída Ocupante`),
Choques = mean(Choque),
Volcamientos = mean(Volcamiento),
Otros = mean(Otro),
number = n(),
Incendios = mean(Incendio)
)
grouped_df%>%
group_by(CG)%>%
summarise(
Atropellos = sd(Atropello),
Caidas = sd(`Caída Ocupante`),
Choques = sd(Choque),
Incendios = sd(Incendio),
Volcamientos = sd(Volcamiento),
Otros = sd(Otro)
)
knitr::opts_chunk$set(echo = TRUE)
grouped_df%>%
group_by(C6G)%>%
summarise(
Atropellos = sd(Atropello),
Caidas = sd(`Caída Ocupante`),
Choques = sd(Choque),
Incendios = sd(Incendio),
Volcamientos = sd(Volcamiento),
Otros = sd(Otro)
)
source("maps_scripts.R")
medellin_map_location <- "./Datasets/Barrio_Vereda/Barrio_Vereda.shp"
init_map(medellin_map_location)
source("maps_scripts.R")
medellin_map_location <- "./Datasets/Barrio_Vereda/Barrio_Vereda.shp"
init_map(medellin_map_location)
View(grouped_df)
knitr::opts_chunk$set(echo = TRUE)
source("maps_scripts.R")
